CELL_META$sector.index)
circos.axis(labels.cex = 0.6)
})
col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(df$factors, df$x, df$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, "text", sector.index = "a", track.index = 1)
devtools::install_github("jokergoo/circlize")
library(circlize)
set.seed(999)
n = 1000
df = data.frame(factors = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
circos.par("track.height" = 0.1)
circos.initialize(factors = df$factors, x = df$x)
circos.track(factors = df$factors, y = df$y,
panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$cell.ylim[2] + uy(5, "mm"),
CELL_META$sector.index)
circos.axis(labels.cex = 0.6)
})
col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(df$factors, df$x, df$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, "text", sector.index = "a", track.index = 1)
library(circlize)
set.seed(999)
n = 1000
df = data.frame(factors = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
circos.initialize(factors, xlim)
circos.track(factors, ylim)
for(sector.index in all.sector.index) {
circos.points(x1, y1, sector.index)
circos.lines(x2, y2, sector.index)
}
library(circlize)
set.seed(999)
n = 1000
df = data.frame(factors = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
library(yaml)
data = yaml.load_file("https://raw.githubusercontent.com/Templarian/slack-emoji-pokemon/master/pokemon.yaml")
set.seed(123)
pokemon_list = data$emojis[sample(length(data$emojis), 40)]
pokemon_name = sapply(pokemon_list, function(x) x$name)
pokemon_src = sapply(pokemon_list, function(x) x$src)
library(EBImage)
circos.par("points.overflow.warning" = FALSE)
circos.initialize(pokemon_name, xlim = c(0, 1))
circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
pos = circlize:::polar2Cartesian(circlize(CELL_META$xcenter, CELL_META$ycenter))
image = EBImage::readImage(pokemon_src[CELL_META$sector.numeric.index])
circos.text(CELL_META$xcenter, CELL_META$cell.ylim[1] - uy(2, "mm"),
CELL_META$sector.index, facing = "clockwise", niceFacing = TRUE,
adj = c(1, 0.5), cex = 0.6)
rasterImage(image,
xleft = pos[1, 1] - 0.05, ybottom = pos[1, 2] - 0.05,
xright = pos[1, 1] + 0.05, ytop = pos[1, 2]+ 0.05)
}, bg.border = 1, track.height = 0.15)
library(yaml)
data = yaml.load_file("https://raw.githubusercontent.com/Templarian/slack-emoji-pokemon/master/pokemon.yaml")
set.seed(123)
pokemon_list = data$emojis[sample(length(data$emojis), 40)]
pokemon_name = sapply(pokemon_list, function(x) x$name)
pokemon_src = sapply(pokemon_list, function(x) x$src)
library(EBImage)
install.packages("EBImage")
circos.track(..., panel.fun = function(x, y) {
circos.points(x, y)
})
circos.points(x, y, sector.index, track.index)
circos.points(x, y)
circos.points(x, y, sector.index, track.index)
circos.points(x, y, pch, col, cex)
circos.points(x, y)
set.seed(999)
n = 1000
df = data.frame(factors = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
circos.points(x, y)
circos.points(df$x, df$y)
circos.link(sector.index1, 0, sector.index2, 0)
circos.link(sector.index1, c(0, 1), sector.index2, 0)
circos.link(sector.index1, c(0, 1), sector.index2, c(1, 2))
circos.link(sector.index1, c(0, 1), sector.index2, 0, col, lwd, lty, border)
par(mar = c(1, 1, 1, 1))
factors = letters[1:8]
circos.initialize(factors = factors, xlim = c(0, 10))
circos.trackPlotRegion(factors = factors, ylim = c(0, 1), bg.col = "grey",
bg.border = NA, track.height = 0.05)
circos.info(plot = TRUE)
#circos.link("a", 5, "c", 5, rou1 = 0.4, rou2 = 0.6, col = "black")
circos.link("a", 5, "g", 5, col = "black", h = 0.5, w = -0.25)
circos.link("c", 10, "d", c(1, 4), col = "#00000040", border = "black")
circos.link("a", c(2, 8), "g", c(4, 4.5), rou1 = 0.9, rou2 = 0.8,
col = "#00000040", border = "black")
circos.link("b", c(1, 10), "a", c(1, 10), rou1 = 0.9, rou2 = 0.4,
col = "#00000040", border = "black")
circos.clear()
layout(matrix(1:9, 3, 3))
for(i in 1:9) {
factors = 1:8
par(mar = c(0.5, 0.5, 0.5, 0.5))
circos.par(cell.padding = c(0, 0, 0, 0))
circos.initialize(factors, xlim = c(0, 1))
circos.track(ylim = c(0, 1), track.height = 0.05,
bg.col = rand_color(8), bg.border = NA)
for(i in 1:20) {
se = sample(1:8, 2)
circos.link(se[1], runif(2), se[2], runif(2),
col = rand_color(1, transparency = 0.4), border = NA)
}
circos.clear()
}
library(tidyverse)
glimpse(mtcars)
c(4 = "four", 6 = "six", 8 = "eight")
c("4" = "four", "6" = "six", "8" = "eight")
my_vec <- c("4" = "four", "6" = "six", "8" = "eight")
my_vec[mtcars$cyl]
mtcars$cyl
my_vec$names
my_vec[mtcars$cyl]
my_vec
names(
names(my_vec)
)
names(my_vec)
names(my_vec)[mtcars$cyl]
as.numeric(names(my_vec))
as.numeric(names(my_vec))[mtcars$cyl]
mtcars$cyl
my_vec[as.numeric(mtcars$cyl)]
mtcars$cyl[my_vec]
mtcars$cyl[names(my_vec)]
mtcars$cyl
my_vec <- c("four" = 4, "six" = 6, "eight" = 8)
my_vec[mtcars$cyl]
my_vec <- c("four" = 4, "six" = 6, "eight" = 8)
my_vec[mtcars$cyl]
my_vec
str(mtcars)
names(my_vec)[mtcars$cyl]
mtcars[mtcars$cyl %in% my_vec, ]
my_vec <- c("four" = 4, "six" = 6)
mtcars[mtcars$cyl %in% my_vec, ]
mtcars[mtcars$cyl %in% names(my_vec), ]
my_vec <- c("four" = 4, "six" = 6, "eight" = 8)
my_vec[mtcars$cyl]
my_vec <- c("four" = "4", "six" = "6", "eight" = "8")
my_vec[mtcars$cyl]
mtcars$cylNames <- my_vec[mtcars$cyl]
mtcars
mtcars$cyl
my_vec
my_vec <- c("four" = 4, "six" = 6, "eight" = 8)
my_vec
mtcars$cylNames <- my_vec[mtcars$cyl]
mtcars
names(my_vec[mtcars$cyl])
my_vec <- c("4" = "four", "6" = "six", "8" = "eight")
names(my_vec[mtcars$cyl])
my_vec[mtcars$cyl]
mtcars$cylNames <- my_vec[mtcars$cyl]
mtcars
my_vec[4, 6, 8]
my_vec[c(4, 6, 8)]
my_vec[c("4", "6")]
mtcars$cylNames <- my_vec[as.character(mtcars$cyl)]
mtcars
my_vec <- c("four" = 4, "six" = 6, "eight" = 8)
my_vec[as.character(mtcars$cyl)]
my_vec[mtcars$cyl]
my_vec
mtcars$cylNames <- my_vec[as.character(mtcars$cyl)]
mtcars
my_vec <- c("4" = "four", "6" = "six", "8" = "eight")
my_vec[as.character(mtcars$cyl)]
mtcars$cylNames <- my_vec[as.character(mtcars$cyl)]
mtcars
my_vec[mtcars$cylNames]
names(my_vec[mtcars$cylNames])
mtcars$cylNames
my_vec[4]
my_vec["4"]
my_vec["four"]
my_vec["4"]
my_vec[as.character(mtcars$cyl)]
c("1" = 1)
c("hello" = 1)
c("hello" = 1:3)
c("bi" = 1:10)
c("bi" = "bi")
c("bi" = "bi"*2)
data()
str(Indometh)
library(tidyverse)
str(Indometh)
ggplot(Indometh, aes(x = Time, y = conc)) +
geom_point()
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point()
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
geom_smooth(method = 'gam')
?geom_smooth
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
geom_smooth(method = 'gam', formula = y ~ poly(x, 2))
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
geom_smooth(method = 'gam', formula = y ~ I(x)^2)
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
geom_smooth(method = 'gam', formula = y ~ I(x^2))
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
geom_smooth(method = 'gam', formula = y ~ I(x^-2))
?geom_smooth
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
geom_smooth(method = 'gam', formula = y ~ x)
coef(lm(conc ~ time, data = Indometh))
mod <- coef(lm(conc ~ time, data = Indometh))
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
geom_abline(data = mod, slope = time, intercept = `(Intercept)`)
mod[2]
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
geom_abline(slope = mod[2], intercept = mod[1])
mod <- coef(lm(conc ~ I(time^2), data = Indometh))
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
geom_abline(slope = mod[2], intercept = mod[1])
mod
mod <- coef(lm(conc ~ poly(time, 2), data = Indometh))
mod
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
geom_abline(slope = mod[2], intercept = mod[1])
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
geom_abline(slope = mod[3], intercept = mod[1])
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
geom_abline(slope = mod[2], intercept = mod[1])
mod <- lm(conc ~ poly(time, 2), data = Indometh)
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(aes(y = fitted(mod)), fun.y = mean, geom = "line")
mod <- lm(conc ~ I(time^2), data = Indometh)
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(aes(y = fitted(mod)), fun.y = mean, geom = "line")
mod <- lm(conc ~ I(time^3), data = Indometh)
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(aes(y = fitted(mod)), fun.y = mean, geom = "line")
poly(Indometh$time, 2)
t[Indometh$time]
t[Indometh$time, 2]
poly(unique(Indometh$time), 2)
Indometh
t <- poly(unique(Indometh$time), 2)
t[Indometh$time, 1:2]
t
Indometh$time
t[Indometh$time, 1:2]
t
names(t)
str(t)
paste("ot", 1:2, sep = "")
Indometh[, paste("ot", 1:2, sep = "")] <- t[Indometh$time, 1:2]
t <- poly(unique(Indometh$time), 2)
Indometh[, paste("ot", 1:2, sep = "")] <- t[Indometh$time, 1:2]
t <- poly(Indometh$time, 2)
Indometh[, paste("ot", 1:2, sep = "")] <- t[Indometh$time, 1:2]
t[Indometh$time, 1:2]
unique(Indometh$time)
t <- poly(unique(Indometh$time), 2)
t[Indometh$time, 1:2]
Indometh
library(tidyverse)
data()
str(Indometh)
t <- poly(unique(Indometh$time), 2)
Indometh[, paste("ot", 1:2, sep = "")] <- t[Indometh$time, 1:2]
96/2
132/3
t <- poly(Indometh$time, 2)
t[Indometh$time, 1:2]
Indometh[, paste("ot", 1:2, sep = "")] <- t[Indometh$time, 1:2]
poly(unique(Indometh$time), 2)
132/11
Indometh
t[Indometh$time, 1:2]
Indometh$time
t
t <- poly(unique(Indometh$time), 2)
t
t[Indometh$time, 1:2]
Indometh$time
poly(unique(Indometh$time), 2)
unique(Indometh$time)
poly(unique(Indometh$time), 2)
t <- poly(unique(Indometh$time), 2)
t
t[Indometh$time, 1:2]
t
t[Indometh$time, 1:2]
t
t <- poly(unique(Indometh$time), 2)
Indometh[, paste("ot", 1:2, sep = "")] <- t[Indometh$time, 1:2]
Indometh
t[1]
t[, 1]
Indometh$ot1 <- t[, 1]
Indometh$ot2 <- t[, 2]
Indometh$ot2
Indometh
library(tidyverse); library(lme4)
str(Indometh)
mod <- lmer(conc ~ (ot1+ot2) + (1 + ot1+ot2|Subject), data = Indometh)
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(aes(y = fitted(mod)), fun.y = mean, geom = "line")
t <- poly(unique(Indometh$time), 3)
Indometh$ot1 <- t[, 1]
Indometh$ot2 <- t[, 2]
Indometh$ot3 <- t[, 3]
mod <- lmer(conc ~ (ot1+ot2+ot3) + (1 + ot1+ot2+ot3|Subject), data = Indometh)
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(aes(y = fitted(mod)), fun.y = mean, geom = "line")
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange") +
stat_summary(aes(y = fitted(mod)), fun.y = mean, geom = "line")
mod <- lmer(conc ~ (ot1+ot2) + (1 + ot1+ot2|Subject), data = Indometh)
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange") +
stat_summary(aes(y = fitted(mod)), fun.y = mean, geom = "line")
mod2 <- lmer(conc ~ I(time^-2), (1 + time|subject), data = Indometh)
mod2 <- lmer(conc ~ I(time^-2) + (1 + time|subject), data = Indometh)
mod2 <- lmer(conc ~ I(time^-2) + (1 + time|Subject), data = Indometh)
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange") +
stat_summary(aes(y = fitted(mo2)), fun.y = mean, geom = "line")
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange") +
stat_summary(aes(y = fitted(mod2)), fun.y = mean, geom = "line")
library(MiMu)
library(MinMU)
library(MiMU)
library(tidyverse); library(lme4); library(MuMIn)
MuMIn::r.squaredGLMM(mod2)
r.squaredGLMM(mod)
2^2
2^-2
mod3 <- lmer(conc ~ I(time-time[1]) + (1 + I(time-time[1])|Subject), data = Indometh)
r.squaredGLMM(mod3)
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange") +
stat_summary(aes(y = fitted(mod3)), fun.y = mean, geom = "line")
Indometh$time[1]
mod3 <- lmer(conc ~ I(time-time) + (1 + I(time-time)|Subject), data = Indometh)
mod3 <- lmer(conc ~ scale(time) + (1 + I(time-time)|Subject), data = Indometh)
mod3 <- lmer(conc ~ scale(time) + (1 + scale(time)|Subject), data = Indometh)
mod3 <- lmer(conc ~ scale(time) + (1 + time|Subject), data = Indometh)
r.squaredGLMM(mod3)
mod3 <- lmer(conc ~ time + (1 + time|Subject), data = Indometh)
r.squaredGLMM(mod3)
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange") +
stat_summary(aes(y = fitted(mod3)), fun.y = mean, geom = "line")
r.squaredGLMM(mod2)
r.squaredLR(mod2)
r.squaredLR(mod)
r.squaredGLMM(mod)
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange") +
stat_summary(aes(y = fitted(mod2)), fun.y = mean, geom = "line")
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange") +
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange")
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange")
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange", color = 'red')
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange", color = 'red')
geom_smooth()
mod2 <- lmer(conc ~ I(time^-2) + (1 + time|Subject), data = Indometh, family = "Poisson")
mod2 <- glmer(conc ~ I(time^-2) + (1 + time|Subject), data = Indometh, family = "Poisson")
mod2 <- glmer(conc ~ I(time^-2) + (1 + time|Subject), data = Indometh, family = "Binomial")
mod2 <- glmer(conc ~ I(time^-2) + (1 + time|Subject), data = Indometh, family = "binomial")
?glmer
mod2 <- glmer(conc ~ I(time^-2) + (1 + time|Subject), data = Indometh, family = binomial)
mod2 <- glmer(conc ~ I(time^-2) + (1 + time|Subject), data = Indometh, family = poisson)
r.squaredGLMM(mod2)
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange") +
stat_summary(aes(y = fitted(mod2)), fun.y = mean, geom = "line")
mod  <- glmer(conc ~ (ot1+ot2) + (1 + ot1+ot2|Subject), data = Indometh, family = poisson)
r.squaredGLMM(mod)
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange") +
stat_summary(aes(y = fitted(mod)), fun.y = mean, geom = "line")
warnings()
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange", color = 'red')
geom_smooth()
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange", color = 'red') +
geom_smooth()
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange") +
stat_summary(aes(y = fitted(mod)), fun.y = mean, geom = "line")
r.squaredGLMM(mod)
mod  <- glmer(conc ~ (ot1+ot2) + (1 + ot1+ot2|Subject), data = Indometh)
mod  <- lmer(conc ~ (ot1+ot2) + (1 + ot1+ot2|Subject), data = Indometh)
r.squaredGLMM(mod)
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange") +
stat_summary(aes(y = fitted(mod)), fun.y = mean, geom = "line")
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange") +
stat_summary(aes(y = fitted(mod2)), fun.y = mean, geom = "line")
ggplot(Indometh, aes(x = time, y = conc)) +
geom_point() +
stat_summary(fun.data = "mean_se", geom = "pointrange", color = 'darkred') +
stat_summary(aes(y = fitted(mod2)), fun.y = mean, geom = "line")
mtcars[mtcars$ cyl == 6, "mpg"] <- 999
mtcars
devtools::install_github("haozhu233/giphyr")
install.packages(c("devtools", "googlesheets", "Hmisc", "Matrix", "psych", "R6", "RcppEigen", "readr", "servr", "tibble", "tidyr", "XML"))
library("RefManageR")
library("ggplot2")
bib <- suppressWarnings(RefManageR::ReadBib("publicationsCVclean.bib", check = FALSE))
dat <- as.data.frame(bib)
dat$year <- as.numeric(dat$year)
dat$journal[is.na(dat$journal)] <- dat$journaltitle[is.na(dat$journal)]
setwd("~/academia/research/mybib")
library("RefManageR")
library("ggplot2")
bib <- suppressWarnings(RefManageR::ReadBib("publicationsCVclean.bib", check = FALSE))
dat <- as.data.frame(bib)
dat$year <- as.numeric(dat$year)
dat$journal[is.na(dat$journal)] <- dat$journaltitle[is.na(dat$journal)]
dat$journaltitle[is.na(dat$journal)]
dat$journaltitle
as.numeric(dat$year)
dat
View(dat)
dat$journal[is.na(dat$journal)] <- dat$journal[is.na(dat$journal)]
dat$journal[is.na(dat$journal)]
library("RefManageR")
library("ggplot2")
bib <- suppressWarnings(RefManageR::ReadBib("publicationsCVclean.bib", check = FALSE))
dat <- as.data.frame(bib)
dat$year <- as.numeric(dat$year)
dat$journal[is.na(dat$journal)] <- dat$journal[is.na(dat$journal)]
View(dat)
dat$journal[is.na(dat$journal)]
library("RefManageR")
library("ggplot2")
bib <- suppressWarnings(RefManageR::ReadBib("publicationsCVclean.bib", check = FALSE))
dat <- as.data.frame(bib)
dat$year <- as.numeric(dat$year)
as.numeric(dat$year)
dat$journal[is.na(dat$journal)]
str(dat)
is.na(dat$journal)
dat$journal[is.na(dat$journal)]
dat$journal[is.na(dat$journal)] <- dat$journal[is.na(dat$journal)]
View(dat)
dat$bibtype <- factor(dat$bibtype, levels = names(sort(table(dat$bibtype))))
ggplot(dat, aes(x = bibtype)) + geom_bar() +
xlab("Count") + ylab("Citation Type") + coord_flip()
datj <- aggregate(bibtype ~ journal, data = dat, FUN = length)
datj <- head(datj[order(datj$bibtype, decreasing = TRUE), ], 30)
datj$journal <- factor(datj$journal, levels = rev(datj$journal))
ggplot(datj, aes(x = journal, y = bibtype)) + geom_bar(stat = "identity") +
ylab("Count") + xlab("Journal") + coord_flip()
aut <- unlist(lapply(unlist(lapply(bib, function(x) unclass(x$author)), recursive = FALSE), `[[`, "family"))
aut <- as.data.frame(head(sort(table(aut), decreasing = TRUE), 50))
aut$aut <- factor(aut$aut, levels = rev(aut$aut))
ggplot(aut, aes(x = aut, y = Freq)) + geom_bar(stat = "identity") +
ylab("Count") + xlab("Author Surname") + coord_flip()
ggplot(dat[dat$year > 1900, ], aes(x = year)) + geom_bar() +
xlab("Publication Year") + ylab("Count")
unlink("cache", recursive = TRUE)
unlink("figure", recursive = TRUE)
